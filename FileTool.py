from utils.imports import *
from utils.func import *

from pathlib import Path

#meta name: FileTool
#meta description: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
#meta developer: @zxcsolomka
#meta img: https://cdn-icons-png.flaticon.com/512/2587/2587054.png

def generate_random_folder_name(length=8):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

def get_file_language(filename):
    extensions = {
        '.py': 'python',
        '.js': 'javascript',
        '.java': 'java',
        '.cpp': 'cpp',
        '.c': 'c',
        '.cs': 'csharp',
        '.php': 'php',
        '.rb': 'ruby',
        '.go': 'go',
        '.rs': 'rust',
        '.swift': 'swift',
        '.kt': 'kotlin',
        '.ts': 'typescript',
        '.sh': 'bash',
        '.html': 'html',
        '.css': 'css',
        '.sql': 'sql',
        '.json': 'json',
        '.xml': 'xml',
        '.md': 'markdown',
        '.txt': 'text'
    }
    ext = os.path.splitext(filename)[1].lower()
    return extensions.get(ext, 'text')

def format_file_tree(path, prefix='', is_full=False):
    if not os.path.isdir(path):
        return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π"
    
    entries = sorted(os.listdir(path))
    output = []
    
    for i, entry in enumerate(entries):
        is_last = i == len(entries) - 1
        full_path = os.path.join(path, entry)
        
        if os.path.isdir(full_path):
            line = f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{entry}/"
            output.append(line)
            
            if is_full:
                new_prefix = prefix + ('    ' if is_last else '‚îÇ   ')
                output.append(format_file_tree(full_path, new_prefix, is_full))
        else:
            if entry == os.path.basename(__file__):
                line = f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{entry} [main]"
            else:
                line = f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{entry}"
            output.append(line)
    
    return '\n'.join(output)

@app.on_message(filters.command("cf", prefix) & filters.user(allow))
async def code_file(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        return
    
    file_path = message.command[1]
    if not os.path.exists(file_path):
        await message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
            
        lang = get_file_language(file_path)
        file_name = os.path.basename(file_path)
        
        if len(content) > 4000:
            await message.reply_document(
                file_path,
                caption=f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ <code>{file_name}</code> —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º"
            )
        else:
            formatted_content = f"```{lang}\n{content}\n```"
            await message.edit_text(
                f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ <code>{file_name}</code>:\n{formatted_content}"
            )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@app.on_message(filters.command("ttc", prefix) & filters.user(allow) & filters.reply)
async def text_to_code(client: Client, message: Message):
    if not message.reply_to_message.text:
        await message.edit_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º")
        return
    
    if len(message.command) < 2:
        await message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞")
        return
    
    file_name = message.command[1]
    if not file_name.endswith('.py'):
        file_name += '.py'
    
    filetool_dir = os.path.join(".", "FileTool")
    if not os.path.exists(filetool_dir):
        os.makedirs(filetool_dir)
    
    random_folder = generate_random_folder_name()
    save_dir = os.path.join(filetool_dir, random_folder)
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    
    file_path = os.path.join(save_dir, file_name)
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(message.reply_to_message.text)
        
        await message.edit_text(
            f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª <code>{file_name}</code>!\n"
            f"<blockquote>üìÇ<i>–§–∞–π–ª –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: <code>{file_path}</i></blockquote>"
        )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.on_message(filters.command("df", prefix) & filters.user(allow) & filters.reply)
async def download_file(client: Client, message: Message):
    if not message.reply_to_message.document:
        await message.edit_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º")
        return
    
    save_path = os.path.join(".", "FileTool", "downloads")
    if len(message.command) > 1:
        custom_path = message.command[1]
        if custom_path.startswith("./"):
            save_path = custom_path[2:]
        elif custom_path.startswith(".\\"):
            save_path = custom_path[2:]
        else:
            save_path = custom_path
    
    if not os.path.exists(save_path):
        os.makedirs(save_path)
    
    document = message.reply_to_message.document
    file_name = document.file_name
    file_path = os.path.join(save_path, file_name)
    
    try:
        await message.reply_to_message.download(file_path)
        await message.edit_text(
            f"‚úÖ –§–∞–π–ª <code>{file_name}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            f"<blockquote>üìÇ<i>–§–∞–π–ª –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: <code>{file_path}</i></blockquote>"
        )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.on_message(filters.command("sps", prefix) & filters.user(allow))
async def start_python_script(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É")
        return
    
    script_path = message.command[1]
    if script_path.startswith("./"):
        script_path = script_path[2:]
    elif script_path.startswith(".\\"):
        script_path = script_path[2:]
    
    if not os.path.exists(script_path):
        await message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not script_path.endswith('.py'):
        await message.edit_text("‚ùå –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ .py —Ñ–∞–π–ª—ã")
        return
    
    try:
        subprocess.Popen([sys.executable, script_path], creationflags=subprocess.CREATE_NEW_CONSOLE)
        
        await message.edit_text(
            f"üêç <i>Python-—Å–∫—Ä–∏–ø—Ç</i> <code>{os.path.basename(script_path)}</code> "
            f"(<code>{script_path}</code>) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
            f"<blockquote>üñ• <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏</i></blockquote>"
        )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")

@app.on_message(filters.command("uf", prefix) & filters.user(allow))
async def unload_file(client: Client, message: Message):
    if len(message.command) < 2:
        await message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        return
    
    file_path = message.command[1]
    if file_path.startswith("./"):
        file_path = file_path[2:]
    elif file_path.startswith(".\\"):
        file_path = file_path[2:]
    
    if not os.path.exists(file_path):
        await message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        await message.delete()
        await message.reply_document(
            file_path,
            caption=f"‚úÖ –§–∞–π–ª <code>{os.path.basename(file_path)}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω!\n"
                    f"<blockquote>üìÇ<i>–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: <code>{file_path}</i></blockquote>"
        )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@app.on_message(filters.command("vf", prefix) & filters.user(allow))
async def view_folder(client: Client, message: Message):
    if len(message.command) < 1:
        await message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")
        return
    
    path = "."
    is_full = False
    
    if len(message.command) > 1:
        path = message.command[1]
        if len(message.command) > 2 and message.command[2].lower() == "full":
            is_full = True
    
    if path.startswith("./"):
        path = path[2:]
    elif path.startswith(".\\"):
        path = path[2:]
    
    if not os.path.exists(path):
        await message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    if not os.path.isdir(path):
        await message.edit_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π")
        return
    
    try:
        tree = format_file_tree(path, is_full=is_full)
        await message.edit_text(
            f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ <code>{path}</code>:\n\n"
            f"<pre>{tree}</pre>"
        )
    except Exception as e:
        await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

modules_help['FileTool'] = {
    "cf": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º",
    "ttc": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
    "df": "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º)",
    "sps": "–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç",
    "uf": "–í—ã–≥—Ä—É–∑–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª",
    "vf": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"
}